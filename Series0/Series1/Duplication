module Duplication

import IO;
import List;
import String;
import util::FileSystem;
import lang::java::jdt::m3::Core;
import lang::java::jdt::m3::AST;
import lang::java::m3::AST;
import lang::java::m3::Core;
import analysis::m3::Core;

public loc project1 = |project://LittleJavaProject/|;
public loc project2 = |project://smallsql0.21_src/|;
public loc project3 = |project://hsqldb-2.3.1/|;

// List of all .java files
public list[loc] getJavaFiles (loc dir){
 return listJavaFiles = [ l | /file(l)  := crawl(dir), l.extension == "java"];
}

public M3 model(loc location) {
	M3 model = createM3FromEclipseProject(location);
	return model;
}

// All methodes in the project.
public set[loc] methods(loc project) {
	M3 model = model(project);
	return methods(model);
}

// Count all methods
public int countMethods(loc project) {
  set[loc] allMethods = methods(project);
  int count = 0;
   
   for(content <- allMethods){
     count +=1;
   }
   return count;  
}

// Count just all lines... in methods (todo: comments & empty lines has to be filtered out.)
public int countLinesMethods(loc method) {
  int count = 0;
   for(i <-[0..size(readFileLines(method))]){
     count +=1;
   }
   return count;  
}

// Get methods with 6+lines.
public set[loc] sixLinePlusMethods(loc project) {
	set[loc] allMethods = methods(project);
	return { n | n <- allMethods, countLinesMethods(n) > 6 };
}



public int countDuplications(loc project){
	list[loc] allSixPlusMethods = toList(sixLinePlusMethods(project));
	int amountMethods = size(allSixPlusMethods); 
	int count = 0;
	int countDuplications = 0;
	list[tuple[str perLine, int methodNr]] method = [];
    int sizeOfMethod= size(readFileLines(allSixPlusMethods[count]));
	
	for(content <- allSixPlusMethods){
	  list[str]methodContent = readFileLines(content);
	   
	   // Method line + number of that method
  	   for(perLine <- methodContent) {
        method += <perLine, count>;     
      } 
      count +=1;
     }
     //Comparation
	 for(sizeMethod <- [0..size(method)]){	       
	 	for (i <-[0..sizeMethod] ) {
		 for (j <-[i+1..sizeMethod] ) {
		  if((method[i].methodNr != method[j].methodNr) && 
		     (method[i].perLine == method[j].perLine)){
		    
		   println("bingo: <method[i]> and <method[j]>");
		   countDuplications +=1;
		  }
		 }
	   }	
	  println(countDuplications);
	} 
	return count; 
}
